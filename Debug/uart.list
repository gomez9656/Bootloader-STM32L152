
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f8  080035f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003600  08003600  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08003678  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003678  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007824  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180d  00000000  00000000  000278bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  000290d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00029798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001517d  00000000  00000000  00029dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078ad  00000000  00000000  0003ef55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820df  00000000  00000000  00046802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c88e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e70  00000000  00000000  000c8934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080034e4 	.word	0x080034e4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080034e4 	.word	0x080034e4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 fb9d 	bl	8000bb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f80a 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f000 f8aa 	bl	80005d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000484:	f000 f854 	bl	8000530 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000488:	f000 f87c 	bl	8000584 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  show_menu();
 800048c:	f000 f9b0 	bl	80007f0 <show_menu>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	e7fe      	b.n	8000490 <main+0x1c>
	...

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b092      	sub	sp, #72	; 0x48
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2234      	movs	r2, #52	; 0x34
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 fbdc 	bl	8002c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <SystemClock_Config+0x98>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <SystemClock_Config+0x98>)
 80004c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ce:	2310      	movs	r3, #16
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d6:	2300      	movs	r3, #0
 80004d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 ff9a 	bl	8001424 <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f6:	f000 fa17 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	230f      	movs	r3, #15
 80004fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	2101      	movs	r1, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fab6 	bl	8001a84 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800051e:	f000 fa03 	bl	8000928 <Error_Handler>
  }
}
 8000522:	bf00      	nop
 8000524:	3748      	adds	r7, #72	; 0x48
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40007000 	.word	0x40007000

08000530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <MX_USART2_UART_Init+0x50>)
 8000538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800053c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000568:	f001 fd20 	bl	8001fac <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000572:	f000 f9d9 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000014c 	.word	0x2000014c
 8000580:	40004400 	.word	0x40004400

08000584 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_USART3_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005bc:	f001 fcf6 	bl	8001fac <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005c6:	f000 f9af 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000d0 	.word	0x200000d0
 80005d4:	40004800 	.word	0x40004800

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_GPIO_Init+0x90>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <MX_GPIO_Init+0x90>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_GPIO_Init+0x90>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_GPIO_Init+0x90>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <MX_GPIO_Init+0x90>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_GPIO_Init+0x90>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	21c0      	movs	r1, #192	; 0xc0
 8000622:	4812      	ldr	r0, [pc, #72]	; (800066c <MX_GPIO_Init+0x94>)
 8000624:	f000 fe42 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000628:	2301      	movs	r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800062c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_GPIO_Init+0x98>)
 800063e:	f000 fcb5 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000642:	23c0      	movs	r3, #192	; 0xc0
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4619      	mov	r1, r3
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0x94>)
 800065a:	f000 fca7 	bl	8000fac <HAL_GPIO_Init>

}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40020400 	.word	0x40020400
 8000670:	40020000 	.word	0x40020000

08000674 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	uint8_t buf[20];
	int buf_len;


	if(uart3_buf[0] == '1'){
 800067c:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <HAL_UART_RxCpltCallback+0x154>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b31      	cmp	r3, #49	; 0x31
 8000682:	d124      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x5a>

		HAL_UART_Transmit(&huart2, (uint8_t*)"1", 1, HAL_MAX_DELAY);
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	2201      	movs	r2, #1
 800068a:	4950      	ldr	r1, [pc, #320]	; (80007cc <HAL_UART_RxCpltCallback+0x158>)
 800068c:	4850      	ldr	r0, [pc, #320]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 800068e:	f001 fcda 	bl	8002046 <HAL_UART_Transmit>

		//wait for answer from nRF52832
		HAL_UART_Receive(&huart2, buf, 9, HAL_MAX_DELAY);
 8000692:	f107 010c 	add.w	r1, r7, #12
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2209      	movs	r2, #9
 800069c:	484c      	ldr	r0, [pc, #304]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 800069e:	f001 fd64 	bl	800216a <HAL_UART_Receive>

		//just for visualization
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	484b      	ldr	r0, [pc, #300]	; (80007d4 <HAL_UART_RxCpltCallback+0x160>)
 80006a6:	f000 fe19 	bl	80012dc <HAL_GPIO_TogglePin>

		//check answer in terminal
		HAL_UART_Transmit(&huart3,  buf, 9, HAL_MAX_DELAY);
 80006aa:	f107 010c 	add.w	r1, r7, #12
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	2209      	movs	r2, #9
 80006b4:	4848      	ldr	r0, [pc, #288]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 80006b6:	f001 fcc6 	bl	8002046 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	2202      	movs	r2, #2
 80006c0:	4946      	ldr	r1, [pc, #280]	; (80007dc <HAL_UART_RxCpltCallback+0x168>)
 80006c2:	4845      	ldr	r0, [pc, #276]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 80006c4:	f001 fcbf 	bl	8002046 <HAL_UART_Transmit>

		show_menu();
 80006c8:	f000 f892 	bl	80007f0 <show_menu>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
		JumpToBootloader();

		show_menu();
	}
}
 80006cc:	e077      	b.n	80007be <HAL_UART_RxCpltCallback+0x14a>
	}else if(uart3_buf[0] == '2'){
 80006ce:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <HAL_UART_RxCpltCallback+0x154>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b32      	cmp	r3, #50	; 0x32
 80006d4:	d124      	bne.n	8000720 <HAL_UART_RxCpltCallback+0xac>
		HAL_UART_Transmit(&huart2, (uint8_t*)"2", 1, HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	2201      	movs	r2, #1
 80006dc:	4940      	ldr	r1, [pc, #256]	; (80007e0 <HAL_UART_RxCpltCallback+0x16c>)
 80006de:	483c      	ldr	r0, [pc, #240]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 80006e0:	f001 fcb1 	bl	8002046 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, buf, 3, HAL_MAX_DELAY);
 80006e4:	f107 010c 	add.w	r1, r7, #12
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	2203      	movs	r2, #3
 80006ee:	4838      	ldr	r0, [pc, #224]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 80006f0:	f001 fd3b 	bl	800216a <HAL_UART_Receive>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	4837      	ldr	r0, [pc, #220]	; (80007d4 <HAL_UART_RxCpltCallback+0x160>)
 80006f8:	f000 fdf0 	bl	80012dc <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart3, buf, 3, HAL_MAX_DELAY);
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2203      	movs	r2, #3
 8000706:	4834      	ldr	r0, [pc, #208]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 8000708:	f001 fc9d 	bl	8002046 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	2202      	movs	r2, #2
 8000712:	4932      	ldr	r1, [pc, #200]	; (80007dc <HAL_UART_RxCpltCallback+0x168>)
 8000714:	4830      	ldr	r0, [pc, #192]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 8000716:	f001 fc96 	bl	8002046 <HAL_UART_Transmit>
		show_menu();
 800071a:	f000 f869 	bl	80007f0 <show_menu>
}
 800071e:	e04e      	b.n	80007be <HAL_UART_RxCpltCallback+0x14a>
	}else if(uart3_buf[0] == '3'){
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <HAL_UART_RxCpltCallback+0x154>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b33      	cmp	r3, #51	; 0x33
 8000726:	d122      	bne.n	800076e <HAL_UART_RxCpltCallback+0xfa>
		HAL_UART_Transmit(&huart2, (uint8_t*)"3", 1, HAL_MAX_DELAY);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	2201      	movs	r2, #1
 800072e:	492d      	ldr	r1, [pc, #180]	; (80007e4 <HAL_UART_RxCpltCallback+0x170>)
 8000730:	4827      	ldr	r0, [pc, #156]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 8000732:	f001 fc88 	bl	8002046 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, uart2_buf, 2, HAL_MAX_DELAY);
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	2202      	movs	r2, #2
 800073c:	492a      	ldr	r1, [pc, #168]	; (80007e8 <HAL_UART_RxCpltCallback+0x174>)
 800073e:	4824      	ldr	r0, [pc, #144]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 8000740:	f001 fd13 	bl	800216a <HAL_UART_Receive>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	4823      	ldr	r0, [pc, #140]	; (80007d4 <HAL_UART_RxCpltCallback+0x160>)
 8000748:	f000 fdc8 	bl	80012dc <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart3, uart2_buf, 2, HAL_MAX_DELAY);
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2202      	movs	r2, #2
 8000752:	4925      	ldr	r1, [pc, #148]	; (80007e8 <HAL_UART_RxCpltCallback+0x174>)
 8000754:	4820      	ldr	r0, [pc, #128]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 8000756:	f001 fc76 	bl	8002046 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	2202      	movs	r2, #2
 8000760:	491e      	ldr	r1, [pc, #120]	; (80007dc <HAL_UART_RxCpltCallback+0x168>)
 8000762:	481d      	ldr	r0, [pc, #116]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 8000764:	f001 fc6f 	bl	8002046 <HAL_UART_Transmit>
		show_menu();
 8000768:	f000 f842 	bl	80007f0 <show_menu>
}
 800076c:	e027      	b.n	80007be <HAL_UART_RxCpltCallback+0x14a>
	}else if(uart3_buf[0] == '4'){
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_UART_RxCpltCallback+0x154>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b34      	cmp	r3, #52	; 0x34
 8000774:	d123      	bne.n	80007be <HAL_UART_RxCpltCallback+0x14a>
		HAL_UART_Transmit(&huart2, (uint8_t*)"4", 1, HAL_MAX_DELAY);
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2201      	movs	r2, #1
 800077c:	491b      	ldr	r1, [pc, #108]	; (80007ec <HAL_UART_RxCpltCallback+0x178>)
 800077e:	4814      	ldr	r0, [pc, #80]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 8000780:	f001 fc61 	bl	8002046 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, uart2_buf, 3, HAL_MAX_DELAY);
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2203      	movs	r2, #3
 800078a:	4917      	ldr	r1, [pc, #92]	; (80007e8 <HAL_UART_RxCpltCallback+0x174>)
 800078c:	4810      	ldr	r0, [pc, #64]	; (80007d0 <HAL_UART_RxCpltCallback+0x15c>)
 800078e:	f001 fcec 	bl	800216a <HAL_UART_Receive>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	480f      	ldr	r0, [pc, #60]	; (80007d4 <HAL_UART_RxCpltCallback+0x160>)
 8000796:	f000 fda1 	bl	80012dc <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart3, uart2_buf, 3, HAL_MAX_DELAY);
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	2203      	movs	r2, #3
 80007a0:	4911      	ldr	r1, [pc, #68]	; (80007e8 <HAL_UART_RxCpltCallback+0x174>)
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 80007a4:	f001 fc4f 	bl	8002046 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	2202      	movs	r2, #2
 80007ae:	490b      	ldr	r1, [pc, #44]	; (80007dc <HAL_UART_RxCpltCallback+0x168>)
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <HAL_UART_RxCpltCallback+0x164>)
 80007b2:	f001 fc48 	bl	8002046 <HAL_UART_Transmit>
		JumpToBootloader();
 80007b6:	f000 f885 	bl	80008c4 <JumpToBootloader>
		show_menu();
 80007ba:	f000 f819 	bl	80007f0 <show_menu>
}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000118 	.word	0x20000118
 80007cc:	080034fc 	.word	0x080034fc
 80007d0:	2000014c 	.word	0x2000014c
 80007d4:	40020400 	.word	0x40020400
 80007d8:	200000d0 	.word	0x200000d0
 80007dc:	08003500 	.word	0x08003500
 80007e0:	08003504 	.word	0x08003504
 80007e4:	08003508 	.word	0x08003508
 80007e8:	2000009c 	.word	0x2000009c
 80007ec:	0800350c 	.word	0x0800350c

080007f0 <show_menu>:

void show_menu(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	  uart3_buf_len = sprintf(uart3_buf, "Welcome to nRF52832 - STM32L152 UART app\r\n");
 80007f4:	492b      	ldr	r1, [pc, #172]	; (80008a4 <show_menu+0xb4>)
 80007f6:	482c      	ldr	r0, [pc, #176]	; (80008a8 <show_menu+0xb8>)
 80007f8:	f002 fa3a 	bl	8002c70 <siprintf>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <show_menu+0xbc>)
 8000800:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <show_menu+0xbc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	b29a      	uxth	r2, r3
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	4926      	ldr	r1, [pc, #152]	; (80008a8 <show_menu+0xb8>)
 800080e:	4828      	ldr	r0, [pc, #160]	; (80008b0 <show_menu+0xc0>)
 8000810:	f001 fc19 	bl	8002046 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "1. Connect to Polar H10\r\n");
 8000814:	4927      	ldr	r1, [pc, #156]	; (80008b4 <show_menu+0xc4>)
 8000816:	4824      	ldr	r0, [pc, #144]	; (80008a8 <show_menu+0xb8>)
 8000818:	f002 fa2a 	bl	8002c70 <siprintf>
 800081c:	4603      	mov	r3, r0
 800081e:	4a23      	ldr	r2, [pc, #140]	; (80008ac <show_menu+0xbc>)
 8000820:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <show_menu+0xbc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	b29a      	uxth	r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	491e      	ldr	r1, [pc, #120]	; (80008a8 <show_menu+0xb8>)
 800082e:	4820      	ldr	r0, [pc, #128]	; (80008b0 <show_menu+0xc0>)
 8000830:	f001 fc09 	bl	8002046 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "2. Disconnect from Polar H10\r\n");
 8000834:	4920      	ldr	r1, [pc, #128]	; (80008b8 <show_menu+0xc8>)
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <show_menu+0xb8>)
 8000838:	f002 fa1a 	bl	8002c70 <siprintf>
 800083c:	4603      	mov	r3, r0
 800083e:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <show_menu+0xbc>)
 8000840:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <show_menu+0xbc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	4916      	ldr	r1, [pc, #88]	; (80008a8 <show_menu+0xb8>)
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <show_menu+0xc0>)
 8000850:	f001 fbf9 	bl	8002046 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "3. Read heart rate sensor\r\n");
 8000854:	4919      	ldr	r1, [pc, #100]	; (80008bc <show_menu+0xcc>)
 8000856:	4814      	ldr	r0, [pc, #80]	; (80008a8 <show_menu+0xb8>)
 8000858:	f002 fa0a 	bl	8002c70 <siprintf>
 800085c:	4603      	mov	r3, r0
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <show_menu+0xbc>)
 8000860:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <show_menu+0xbc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	b29a      	uxth	r2, r3
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	490e      	ldr	r1, [pc, #56]	; (80008a8 <show_menu+0xb8>)
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <show_menu+0xc0>)
 8000870:	f001 fbe9 	bl	8002046 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "4. OTA\r\n");
 8000874:	4912      	ldr	r1, [pc, #72]	; (80008c0 <show_menu+0xd0>)
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <show_menu+0xb8>)
 8000878:	f002 f9fa 	bl	8002c70 <siprintf>
 800087c:	4603      	mov	r3, r0
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <show_menu+0xbc>)
 8000880:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <show_menu+0xbc>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	b29a      	uxth	r2, r3
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <show_menu+0xb8>)
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <show_menu+0xc0>)
 8000890:	f001 fbd9 	bl	8002046 <HAL_UART_Transmit>

	 HAL_UART_Receive_IT(&huart3, uart3_buf, 1);
 8000894:	2201      	movs	r2, #1
 8000896:	4904      	ldr	r1, [pc, #16]	; (80008a8 <show_menu+0xb8>)
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <show_menu+0xc0>)
 800089a:	f001 fd08 	bl	80022ae <HAL_UART_Receive_IT>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08003510 	.word	0x08003510
 80008a8:	20000118 	.word	0x20000118
 80008ac:	20000114 	.word	0x20000114
 80008b0:	200000d0 	.word	0x200000d0
 80008b4:	0800353c 	.word	0x0800353c
 80008b8:	08003558 	.word	0x08003558
 80008bc:	08003578 	.word	0x08003578
 80008c0:	08003594 	.word	0x08003594

080008c4 <JumpToBootloader>:

void JumpToBootloader(void){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

		void (*SysMemBootJump)(void);

		volatile uint32_t addr = 0x1FF00000;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <JumpToBootloader+0x58>)
 80008cc:	607b      	str	r3, [r7, #4]


		HAL_RCC_DeInit();
 80008ce:	f000 fd1f 	bl	8001310 <HAL_RCC_DeInit>

		SysTick->CTRL = 0;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <JumpToBootloader+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <JumpToBootloader+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <JumpToBootloader+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop

		__disable_irq();

		__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <JumpToBootloader+0x60>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 0303 	bic.w	r3, r3, #3
 80008f0:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <JumpToBootloader+0x60>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]

		SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3304      	adds	r3, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	60fb      	str	r3, [r7, #12]

		__set_MSP(*(uint32_t *)addr);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f383 8808 	msr	MSP, r3
}
 800090c:	bf00      	nop

		SysMemBootJump();
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4798      	blx	r3
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	1ff00000 	.word	0x1ff00000
 8000920:	e000e010 	.word	0xe000e010
 8000924:	40010000 	.word	0x40010000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_MspInit+0x5c>)
 800093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000944:	6253      	str	r3, [r2, #36]	; 0x24
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x5c>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x5c>)
 8000954:	6a1b      	ldr	r3, [r3, #32]
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6213      	str	r3, [r2, #32]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x5c>)
 8000960:	6a1b      	ldr	r3, [r3, #32]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x5c>)
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x5c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6253      	str	r3, [r2, #36]	; 0x24
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x5c>)
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fa52 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <HAL_UART_MspInit+0xe8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d128      	bne.n	8000a08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <HAL_UART_MspInit+0xec>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	4a31      	ldr	r2, [pc, #196]	; (8000a80 <HAL_UART_MspInit+0xec>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6253      	str	r3, [r2, #36]	; 0x24
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <HAL_UART_MspInit+0xec>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <HAL_UART_MspInit+0xec>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <HAL_UART_MspInit+0xec>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <HAL_UART_MspInit+0xec>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e6:	230c      	movs	r3, #12
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f6:	2307      	movs	r3, #7
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4820      	ldr	r0, [pc, #128]	; (8000a84 <HAL_UART_MspInit+0xf0>)
 8000a02:	f000 fad3 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a06:	e035      	b.n	8000a74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_UART_MspInit+0xf4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d130      	bne.n	8000a74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_UART_MspInit+0xec>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <HAL_UART_MspInit+0xec>)
 8000a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0xec>)
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0xec>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <HAL_UART_MspInit+0xec>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_UART_MspInit+0xec>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a54:	2307      	movs	r3, #7
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <HAL_UART_MspInit+0xf8>)
 8000a60:	f000 faa4 	bl	8000fac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2027      	movs	r0, #39	; 0x27
 8000a6a:	f000 f9ea 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a6e:	2027      	movs	r0, #39	; 0x27
 8000a70:	f000 fa03 	bl	8000e7a <HAL_NVIC_EnableIRQ>
}
 8000a74:	bf00      	nop
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad6:	f000 f8c1 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <USART3_IRQHandler+0x10>)
 8000ae6:	f001 fc13 	bl	8002310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000d0 	.word	0x200000d0

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f002 f872 	bl	8002c0c <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20008000 	.word	0x20008000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	2000008c 	.word	0x2000008c
 8000b5c:	200001a8 	.word	0x200001a8

08000b60 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b92:	f7ff ffe5 	bl	8000b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 f83f 	bl	8002c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9a:	f7ff fc6b 	bl	8000474 <main>
  bx lr
 8000b9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ba8:	08003608 	.word	0x08003608
  ldr r2, =_sbss
 8000bac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bb0:	200001a4 	.word	0x200001a4

08000bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_IRQHandler>

08000bb6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f933 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 f80e 	bl	8000be8 <HAL_InitTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	e001      	b.n	8000bdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd8:	f7ff feac 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_InitTick+0x68>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d022      	beq.n	8000c42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_InitTick+0x6c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_InitTick+0x68>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f940 	bl	8000e96 <HAL_SYSTICK_Config>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10f      	bne.n	8000c3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b0f      	cmp	r3, #15
 8000c20:	d809      	bhi.n	8000c36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c22:	2200      	movs	r2, #0
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2a:	f000 f90a 	bl	8000e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_InitTick+0x70>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e007      	b.n	8000c46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e004      	b.n	8000c46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e001      	b.n	8000c46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000190 	.word	0x20000190
 8000c7c:	20000008 	.word	0x20000008

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000190 	.word	0x20000190

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4906      	ldr	r1, [pc, #24]	; (8000d2c <__NVIC_EnableIRQ+0x34>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff90 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff2d 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff42 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff90 	bl	8000d84 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5f 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff35 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffa2 	bl	8000de8 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d008      	beq.n	8000ed8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2204      	movs	r2, #4
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e022      	b.n	8000f1e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 020e 	bic.w	r2, r2, #14
 8000ee6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0201 	bic.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 021c 	and.w	r2, r3, #28
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d005      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2204      	movs	r2, #4
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e029      	b.n	8000fa0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 020e 	bic.w	r2, r2, #14
 8000f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 021c 	and.w	r2, r3, #28
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	4798      	blx	r3
    }
  }
  return status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fc2:	e154      	b.n	800126e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8146 	beq.w	8001268 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0203 	and.w	r2, r3, #3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80a0 	beq.w	8001268 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b58      	ldr	r3, [pc, #352]	; (800128c <HAL_GPIO_Init+0x2e0>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_GPIO_Init+0x2e0>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6213      	str	r3, [r2, #32]
 8001134:	4b55      	ldr	r3, [pc, #340]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001140:	4a53      	ldr	r2, [pc, #332]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d019      	beq.n	80011a0 <HAL_GPIO_Init+0x1f4>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a4a      	ldr	r2, [pc, #296]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d013      	beq.n	800119c <HAL_GPIO_Init+0x1f0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d00d      	beq.n	8001198 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_GPIO_Init+0x2f4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a47      	ldr	r2, [pc, #284]	; (80012a4 <HAL_GPIO_Init+0x2f8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_GPIO_Init+0x1e4>
 800118c:	2304      	movs	r3, #4
 800118e:	e008      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001190:	2305      	movs	r3, #5
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001194:	2303      	movs	r3, #3
 8001196:	e004      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001198:	2302      	movs	r3, #2
 800119a:	e002      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 80011a0:	2300      	movs	r3, #0
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	f002 0203 	and.w	r2, r2, #3
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011b2:	4937      	ldr	r1, [pc, #220]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f aea3 	bne.w	8000fc4 <HAL_GPIO_Init+0x18>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40010000 	.word	0x40010000
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4013      	ands	r3, r2
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43d9      	mvns	r1, r3
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	400b      	ands	r3, r1
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
	...

08001310 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HAL_RCC_DeInit+0x104>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800131e:	4a3d      	ldr	r2, [pc, #244]	; (8001414 <HAL_RCC_DeInit+0x104>)
 8001320:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 8001324:	6053      	str	r3, [r2, #4]
            ((RCC_MSICALIBRATION_DEFAULT << RCC_ICSCR_MSITRIM_Pos) | (RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos) | RCC_ICSCR_MSIRANGE_5));

  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_RCC_DeInit+0x104>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a3a      	ldr	r2, [pc, #232]	; (8001414 <HAL_RCC_DeInit+0x104>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001332:	f7ff fca5 	bl	8000c80 <HAL_GetTick>
 8001336:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_DeInit+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800133a:	f7ff fca1 	bl	8000c80 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_DeInit+0x3c>
    {
      return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e05e      	b.n	800140a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_RCC_DeInit+0x104>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_DeInit+0x2a>
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_RCC_DeInit+0x104>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a2d      	ldr	r2, [pc, #180]	; (8001414 <HAL_RCC_DeInit+0x104>)
 800135e:	f023 0303 	bic.w	r3, r3, #3
 8001362:	6093      	str	r3, [r2, #8]

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001364:	e00a      	b.n	800137c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001366:	f7ff fc8b 	bl	8000c80 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e046      	b.n	800140a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_RCC_DeInit+0x104>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ee      	bne.n	8001366 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_RCC_DeInit+0x108>)
 800138a:	4a24      	ldr	r2, [pc, #144]	; (800141c <HAL_RCC_DeInit+0x10c>)
 800138c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(uwTickPrio);
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_RCC_DeInit+0x110>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc28 	bl	8000be8 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	70fb      	strb	r3, [r7, #3]
  if(status != HAL_OK)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_DeInit+0x96>
  {
    return status;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	e031      	b.n	800140a <HAL_RCC_DeInit+0xfa>
  }

  /* Reset HSION, HSEON, CSSON & PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013ac:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80013b0:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80013b4:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80013c2:	f7ff fc5d 	bl	8000c80 <HAL_GetTick>
 80013c6:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fc59 	bl	8000c80 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e016      	b.n	800140a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_DeInit+0xba>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]

  /* Clear all flags */
#if defined(RCC_LSECSS_SUPPORT)
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_LSECSSC | RCC_CIR_CSSC);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013f6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80013fa:	60da      	str	r2, [r3, #12]
#else
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_CSSC);
#endif

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_DeInit+0x104>)
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_RCC_DeInit+0x104>)
 8001402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001406:	6353      	str	r3, [r2, #52]	; 0x34

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	20000000 	.word	0x20000000
 800141c:	001fff68 	.word	0x001fff68
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e31d      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b94      	ldr	r3, [pc, #592]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	4b91      	ldr	r3, [pc, #580]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001448:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d07b      	beq.n	800154e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b08      	cmp	r3, #8
 800145a:	d006      	beq.n	800146a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d10f      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d10b      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	4b87      	ldr	r3, [pc, #540]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d06a      	beq.n	800154c <HAL_RCC_OscConfig+0x128>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d166      	bne.n	800154c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e2f7      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x74>
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a7e      	ldr	r2, [pc, #504]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e02d      	b.n	80014f4 <HAL_RCC_OscConfig+0xd0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x96>
 80014a0:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a78      	ldr	r2, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b76      	ldr	r3, [pc, #472]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a75      	ldr	r2, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0xd0>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0xb8>
 80014c2:	4b71      	ldr	r3, [pc, #452]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a70      	ldr	r2, [pc, #448]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b6e      	ldr	r3, [pc, #440]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6d      	ldr	r2, [pc, #436]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0xd0>
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a69      	ldr	r2, [pc, #420]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b67      	ldr	r3, [pc, #412]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a66      	ldr	r2, [pc, #408]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fbc0 	bl	8000c80 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fbbc 	bl	8000c80 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e2ad      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0xe0>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fbac 	bl	8000c80 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fba8 	bl	8000c80 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e299      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x108>
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d05a      	beq.n	8001610 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d119      	bne.n	800159a <HAL_RCC_OscConfig+0x176>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d116      	bne.n	800159a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156c:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_OscConfig+0x160>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e276      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	493d      	ldr	r1, [pc, #244]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001598:	e03a      	b.n	8001610 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d020      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <HAL_RCC_OscConfig+0x268>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb6a 	bl	8000c80 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb66 	bl	8000c80 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e257      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	492a      	ldr	r1, [pc, #168]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
 80015e2:	e015      	b.n	8001610 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <HAL_RCC_OscConfig+0x268>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb49 	bl	8000c80 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fb45 	bl	8000c80 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e236      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80b8 	beq.w	800178e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d170      	bne.n	8001706 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x218>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e21a      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001648:	429a      	cmp	r2, r3
 800164a:	d921      	bls.n	8001690 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fc4b 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e208      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4906      	ldr	r1, [pc, #24]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	061b      	lsls	r3, r3, #24
 8001680:	4901      	ldr	r1, [pc, #4]	; (8001688 <HAL_RCC_OscConfig+0x264>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	e020      	b.n	80016ca <HAL_RCC_OscConfig+0x2a6>
 8001688:	40023800 	.word	0x40023800
 800168c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	4ba4      	ldr	r3, [pc, #656]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	49a1      	ldr	r1, [pc, #644]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a2:	4ba0      	ldr	r3, [pc, #640]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	061b      	lsls	r3, r3, #24
 80016b0:	499c      	ldr	r1, [pc, #624]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fc16 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1d3      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	0b5b      	lsrs	r3, r3, #13
 80016d0:	3301      	adds	r3, #1
 80016d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016da:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80016dc:	6892      	ldr	r2, [r2, #8]
 80016de:	0912      	lsrs	r2, r2, #4
 80016e0:	f002 020f 	and.w	r2, r2, #15
 80016e4:	4990      	ldr	r1, [pc, #576]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80016e6:	5c8a      	ldrb	r2, [r1, r2]
 80016e8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016ea:	4a90      	ldr	r2, [pc, #576]	; (800192c <HAL_RCC_OscConfig+0x508>)
 80016ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ee:	4b90      	ldr	r3, [pc, #576]	; (8001930 <HAL_RCC_OscConfig+0x50c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fa78 	bl	8000be8 <HAL_InitTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d045      	beq.n	800178e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	e1b5      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d029      	beq.n	8001762 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800170e:	4b89      	ldr	r3, [pc, #548]	; (8001934 <HAL_RCC_OscConfig+0x510>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fab4 	bl	8000c80 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171c:	f7ff fab0 	bl	8000c80 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1a1      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4977      	ldr	r1, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	4b75      	ldr	r3, [pc, #468]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	4972      	ldr	r1, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001762:	4b74      	ldr	r3, [pc, #464]	; (8001934 <HAL_RCC_OscConfig+0x510>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fa8a 	bl	8000c80 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001770:	f7ff fa86 	bl	8000c80 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e177      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001782:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d030      	beq.n	80017fc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x514>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff fa6a 	bl	8000c80 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fa66 	bl	8000c80 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e157      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c2:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x38c>
 80017ce:	e015      	b.n	80017fc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_OscConfig+0x514>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa53 	bl	8000c80 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fa4f 	bl	8000c80 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e140      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f0:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80b5 	beq.w	8001974 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180e:	4b45      	ldr	r3, [pc, #276]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10d      	bne.n	8001836 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b42      	ldr	r3, [pc, #264]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	4a41      	ldr	r2, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	6253      	str	r3, [r2, #36]	; 0x24
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001832:	2301      	movs	r3, #1
 8001834:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_OscConfig+0x518>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d118      	bne.n	8001874 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_RCC_OscConfig+0x518>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a3d      	ldr	r2, [pc, #244]	; (800193c <HAL_RCC_OscConfig+0x518>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184e:	f7ff fa17 	bl	8000c80 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001856:	f7ff fa13 	bl	8000c80 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e104      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_RCC_OscConfig+0x518>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x466>
 800187c:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	4a28      	ldr	r2, [pc, #160]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6353      	str	r3, [r2, #52]	; 0x34
 8001888:	e02d      	b.n	80018e6 <HAL_RCC_OscConfig+0x4c2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x488>
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001896:	4a23      	ldr	r2, [pc, #140]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 8001898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800189c:	6353      	str	r3, [r2, #52]	; 0x34
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018a8:	6353      	str	r3, [r2, #52]	; 0x34
 80018aa:	e01c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4c2>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d10c      	bne.n	80018ce <HAL_RCC_OscConfig+0x4aa>
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6353      	str	r3, [r2, #52]	; 0x34
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6353      	str	r3, [r2, #52]	; 0x34
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0x4c2>
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d8:	6353      	str	r3, [r2, #52]	; 0x34
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018de:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018e4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9c7 	bl	8000c80 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff f9c3 	bl	8000c80 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e0b2      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ee      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4d2>
 8001918:	e023      	b.n	8001962 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff f9b1 	bl	8000c80 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001920:	e019      	b.n	8001956 <HAL_RCC_OscConfig+0x532>
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	080035ac 	.word	0x080035ac
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004
 8001934:	42470020 	.word	0x42470020
 8001938:	42470680 	.word	0x42470680
 800193c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff f99e 	bl	8000c80 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e08d      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001962:	7ffb      	ldrb	r3, [r7, #31]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	4a43      	ldr	r2, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001972:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	d079      	beq.n	8001a70 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d056      	beq.n	8001a30 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b02      	cmp	r3, #2
 8001988:	d13b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <HAL_RCC_OscConfig+0x65c>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff f976 	bl	8000c80 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f972 	bl	8000c80 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e063      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	4319      	orrs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	430b      	orrs	r3, r1
 80019ce:	492b      	ldr	r1, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_OscConfig+0x65c>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff f951 	bl	8000c80 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff f94d 	bl	8000c80 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e03e      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x5be>
 8001a00:	e036      	b.n	8001a70 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_RCC_OscConfig+0x65c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f93a 	bl	8000c80 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f936 	bl	8000c80 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e027      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5ec>
 8001a2e:	e01f      	b.n	8001a70 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e01a      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_RCC_OscConfig+0x658>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d10d      	bne.n	8001a6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	42470060 	.word	0x42470060

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e11a      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d919      	bls.n	8001ada <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x34>
 8001aac:	4b8a      	ldr	r3, [pc, #552]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a89      	ldr	r2, [pc, #548]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 0201 	bic.w	r2, r3, #1
 8001ac0:	4985      	ldr	r1, [pc, #532]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac8:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0f9      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae6:	4b7d      	ldr	r3, [pc, #500]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	497a      	ldr	r1, [pc, #488]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 808e 	beq.w	8001c22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d121      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0d7      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b26:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d115      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0cb      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0bf      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0b7      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	495c      	ldr	r1, [pc, #368]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f886 	bl	8000c80 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d112      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff f87e 	bl	8000c80 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e09b      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d1ee      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xfc>
 8001ba2:	e03e      	b.n	8001c22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7ff f867 	bl	8000c80 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e084      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc4:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_ClockConfig+0x12a>
 8001bd0:	e027      	b.n	8001c22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d11d      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff f850 	bl	8000c80 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e06d      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x158>
 8001bfe:	e010      	b.n	8001c22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff f83e 	bl	8000c80 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e05b      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ee      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d219      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d105      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x1be>
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0201 	bic.w	r2, r3, #1
 8001c4a:	4923      	ldr	r1, [pc, #140]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCC_ClockConfig+0x254>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e034      	b.n	8001cce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4917      	ldr	r1, [pc, #92]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490f      	ldr	r1, [pc, #60]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ca2:	f000 f823 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_ClockConfig+0x258>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	490b      	ldr	r1, [pc, #44]	; (8001ce0 <HAL_RCC_ClockConfig+0x25c>)
 8001cb4:	5ccb      	ldrb	r3, [r1, r3]
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_RCC_ClockConfig+0x260>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe ff90 	bl	8000be8 <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	080035ac 	.word	0x080035ac
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cf2:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d00d      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x32>
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	f200 80a4 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x164>
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d002      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x26>
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d003      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x2c>
 8001d10:	e09e      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d12:	4b5a      	ldr	r3, [pc, #360]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x190>)
 8001d14:	613b      	str	r3, [r7, #16]
      break;
 8001d16:	e0a9      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x194>)
 8001d1a:	613b      	str	r3, [r7, #16]
      break;
 8001d1c:	e0a6      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x198>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0d9b      	lsrs	r3, r3, #22
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	3301      	adds	r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d38:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d041      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	461c      	mov	r4, r3
 8001d48:	f04f 0500 	mov.w	r5, #0
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	014b      	lsls	r3, r1, #5
 8001d5a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d5e:	0142      	lsls	r2, r0, #5
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	1b00      	subs	r0, r0, r4
 8001d66:	eb61 0105 	sbc.w	r1, r1, r5
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	018b      	lsls	r3, r1, #6
 8001d74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d78:	0182      	lsls	r2, r0, #6
 8001d7a:	1a12      	subs	r2, r2, r0
 8001d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d80:	f04f 0000 	mov.w	r0, #0
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	00d9      	lsls	r1, r3, #3
 8001d8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d8e:	00d0      	lsls	r0, r2, #3
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	1912      	adds	r2, r2, r4
 8001d96:	eb45 0303 	adc.w	r3, r5, r3
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	0259      	lsls	r1, r3, #9
 8001da4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001da8:	0250      	lsls	r0, r2, #9
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	f7fe f9df 	bl	800017c <__aeabi_uldivmod>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e040      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	461c      	mov	r4, r3
 8001dcc:	f04f 0500 	mov.w	r5, #0
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	014b      	lsls	r3, r1, #5
 8001dde:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001de2:	0142      	lsls	r2, r0, #5
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	1b00      	subs	r0, r0, r4
 8001dea:	eb61 0105 	sbc.w	r1, r1, r5
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	018b      	lsls	r3, r1, #6
 8001df8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dfc:	0182      	lsls	r2, r0, #6
 8001dfe:	1a12      	subs	r2, r2, r0
 8001e00:	eb63 0301 	sbc.w	r3, r3, r1
 8001e04:	f04f 0000 	mov.w	r0, #0
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	00d9      	lsls	r1, r3, #3
 8001e0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e12:	00d0      	lsls	r0, r2, #3
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	1912      	adds	r2, r2, r4
 8001e1a:	eb45 0303 	adc.w	r3, r5, r3
 8001e1e:	f04f 0000 	mov.w	r0, #0
 8001e22:	f04f 0100 	mov.w	r1, #0
 8001e26:	0299      	lsls	r1, r3, #10
 8001e28:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e2c:	0290      	lsls	r0, r2, #10
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	f7fe f99d 	bl	800017c <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4613      	mov	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	613b      	str	r3, [r7, #16]
      break;
 8001e4e:	e00d      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0b5b      	lsrs	r3, r3, #13
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	613b      	str	r3, [r7, #16]
      break;
 8001e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6c:	693b      	ldr	r3, [r7, #16]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bdb0      	pop	{r4, r5, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200
 8001e84:	080035a0 	.word	0x080035a0

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea0:	f7ff fff2 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	080035bc 	.word	0x080035bc

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	080035bc 	.word	0x080035bc

08001eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d12c      	bne.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f04:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e016      	b.n	8001f4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6253      	str	r3, [r2, #36]	; 0x24
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001f3c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001f50:	d105      	bne.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f58:	d101      	bne.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 0201 	bic.w	r2, r3, #1
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e03f      	b.n	800203e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fcde 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	; 0x24
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fd27 	bl	8002a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b08a      	sub	sp, #40	; 0x28
 800204a:	af02      	add	r7, sp, #8
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	d17c      	bne.n	8002160 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_UART_Transmit+0x2c>
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e075      	b.n	8002162 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_UART_Transmit+0x3e>
 8002080:	2302      	movs	r3, #2
 8002082:	e06e      	b.n	8002162 <HAL_UART_Transmit+0x11c>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2221      	movs	r2, #33	; 0x21
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800209a:	f7fe fdf1 	bl	8000c80 <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	88fa      	ldrh	r2, [r7, #6]
 80020a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b4:	d108      	bne.n	80020c8 <HAL_UART_Transmit+0x82>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d104      	bne.n	80020c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	e003      	b.n	80020d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020d8:	e02a      	b.n	8002130 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fada 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e036      	b.n	8002162 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	3302      	adds	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	e007      	b.n	8002122 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	3301      	adds	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1cf      	bne.n	80020da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	2140      	movs	r1, #64	; 0x40
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 faaa 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e006      	b.n	8002162 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b08a      	sub	sp, #40	; 0x28
 800216e:	af02      	add	r7, sp, #8
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b20      	cmp	r3, #32
 8002188:	f040 808c 	bne.w	80022a4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_UART_Receive+0x2e>
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e084      	b.n	80022a6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_UART_Receive+0x40>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e07d      	b.n	80022a6 <HAL_UART_Receive+0x13c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2222      	movs	r2, #34	; 0x22
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c6:	f7fe fd5b 	bl	8000c80 <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e0:	d108      	bne.n	80021f4 <HAL_UART_Receive+0x8a>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d104      	bne.n	80021f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	e003      	b.n	80021fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002204:	e043      	b.n	800228e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2200      	movs	r2, #0
 800220e:	2120      	movs	r1, #32
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fa44 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e042      	b.n	80022a6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	b29b      	uxth	r3, r3
 800222e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002232:	b29a      	uxth	r2, r3
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	3302      	adds	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e01f      	b.n	8002280 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002248:	d007      	beq.n	800225a <HAL_UART_Receive+0xf0>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_UART_Receive+0xfe>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	e008      	b.n	800227a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1b6      	bne.n	8002206 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d11d      	bne.n	8002304 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_UART_Receive_IT+0x26>
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e016      	b.n	8002306 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Receive_IT+0x38>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e00f      	b.n	8002306 <HAL_UART_Receive_IT+0x58>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fa19 	bl	8002732 <UART_Start_Receive_IT>
 8002300:	4603      	mov	r3, r0
 8002302:	e000      	b.n	8002306 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_UART_IRQHandler+0x52>
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fac9 	bl	80028f2 <UART_Receive_IT>
      return;
 8002360:	e17b      	b.n	800265a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80b1 	beq.w	80024cc <HAL_UART_IRQHandler+0x1bc>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_UART_IRQHandler+0x70>
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80a6 	beq.w	80024cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_UART_IRQHandler+0x90>
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_UART_IRQHandler+0xb0>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0202 	orr.w	r2, r3, #2
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_UART_IRQHandler+0xd0>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f043 0204 	orr.w	r2, r3, #4
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00f      	beq.n	800240a <HAL_UART_IRQHandler+0xfa>
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <HAL_UART_IRQHandler+0xee>
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0208 	orr.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 811e 	beq.w	8002650 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_UART_IRQHandler+0x11e>
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fa62 	bl	80028f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_UART_IRQHandler+0x146>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d031      	beq.n	80024ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f9a4 	bl	80027a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b40      	cmp	r3, #64	; 0x40
 8002468:	d123      	bne.n	80024b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002478:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	4a76      	ldr	r2, [pc, #472]	; (8002660 <HAL_UART_IRQHandler+0x350>)
 8002488:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fd4a 	bl	8000f28 <HAL_DMA_Abort_IT>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024a4:	4610      	mov	r0, r2
 80024a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	e00e      	b.n	80024c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8e3 	bl	8002676 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b0:	e00a      	b.n	80024c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f8df 	bl	8002676 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	e006      	b.n	80024c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8db 	bl	8002676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024c6:	e0c3      	b.n	8002650 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	bf00      	nop
    return;
 80024ca:	e0c1      	b.n	8002650 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f040 80a1 	bne.w	8002618 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 809b 	beq.w	8002618 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8095 	beq.w	8002618 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d14e      	bne.n	80025b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800251c:	8a3b      	ldrh	r3, [r7, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8098 	beq.w	8002654 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002528:	8a3a      	ldrh	r2, [r7, #16]
 800252a:	429a      	cmp	r2, r3
 800252c:	f080 8092 	bcs.w	8002654 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8a3a      	ldrh	r2, [r7, #16]
 8002534:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b20      	cmp	r3, #32
 800253e:	d02b      	beq.n	8002598 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800254e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0210 	bic.w	r2, r2, #16
 800258c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fc8b 	bl	8000eae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f86d 	bl	8002688 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80025ae:	e051      	b.n	8002654 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d047      	beq.n	8002658 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80025c8:	8a7b      	ldrh	r3, [r7, #18]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d044      	beq.n	8002658 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0210 	bic.w	r2, r2, #16
 800260a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800260c:	8a7b      	ldrh	r3, [r7, #18]
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f839 	bl	8002688 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002616:	e01f      	b.n	8002658 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_UART_IRQHandler+0x324>
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8f9 	bl	8002824 <UART_Transmit_IT>
    return;
 8002632:	e012      	b.n	800265a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <HAL_UART_IRQHandler+0x34a>
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f93a 	bl	80028c2 <UART_EndTransmit_IT>
    return;
 800264e:	e004      	b.n	800265a <HAL_UART_IRQHandler+0x34a>
    return;
 8002650:	bf00      	nop
 8002652:	e002      	b.n	800265a <HAL_UART_IRQHandler+0x34a>
      return;
 8002654:	bf00      	nop
 8002656:	e000      	b.n	800265a <HAL_UART_IRQHandler+0x34a>
      return;
 8002658:	bf00      	nop
  }
}
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	080027fd 	.word	0x080027fd

08002664 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ae:	e02c      	b.n	800270a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d028      	beq.n	800270a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <UART_WaitOnFlagUntilTimeout+0x30>
 80026be:	f7fe fadf 	bl	8000c80 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d21d      	bcs.n	800270a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e00f      	b.n	800272a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	429a      	cmp	r2, r3
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	429a      	cmp	r2, r3
 8002726:	d0c3      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	4613      	mov	r3, r2
 800273e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2222      	movs	r2, #34	; 0x22
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0210 	bic.w	r2, r2, #16
 80027e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff ff2d 	bl	8002676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b21      	cmp	r3, #33	; 0x21
 8002836:	d13e      	bne.n	80028b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d114      	bne.n	800286c <UART_Transmit_IT+0x48>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d110      	bne.n	800286c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800285e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	621a      	str	r2, [r3, #32]
 800286a:	e008      	b.n	800287e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	1c59      	adds	r1, r3, #1
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6211      	str	r1, [r2, #32]
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4619      	mov	r1, r3
 800288c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff febe 	bl	8002664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b22      	cmp	r3, #34	; 0x22
 8002904:	f040 8099 	bne.w	8002a3a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d117      	bne.n	8002942 <UART_Receive_IT+0x50>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d113      	bne.n	8002942 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	b29a      	uxth	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	1c9a      	adds	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
 8002940:	e026      	b.n	8002990 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002954:	d007      	beq.n	8002966 <UART_Receive_IT+0x74>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <UART_Receive_IT+0x82>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e008      	b.n	8002986 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002980:	b2da      	uxtb	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29b      	uxth	r3, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4619      	mov	r1, r3
 800299e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d148      	bne.n	8002a36 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0220 	bic.w	r2, r2, #32
 80029b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d123      	bne.n	8002a2c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0210 	bic.w	r2, r2, #16
 80029f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d10a      	bne.n	8002a1e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fe2f 	bl	8002688 <HAL_UARTEx_RxEventCallback>
 8002a2a:	e002      	b.n	8002a32 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7fd fe21 	bl	8000674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e002      	b.n	8002a3c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a84:	f023 030c 	bic.w	r3, r3, #12
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a55      	ldr	r2, [pc, #340]	; (8002c04 <UART_SetConfig+0x1c0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d103      	bne.n	8002aba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ab2:	f7ff fa07 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	e002      	b.n	8002ac0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002aba:	f7ff f9ef 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002abe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac8:	d14c      	bne.n	8002b64 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009a      	lsls	r2, r3, #2
 8002ad4:	441a      	add	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	4a49      	ldr	r2, [pc, #292]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	0119      	lsls	r1, r3, #4
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009a      	lsls	r2, r3, #2
 8002af4:	441a      	add	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002b02:	fba3 0302 	umull	r0, r3, r3, r2
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2064      	movs	r0, #100	; 0x64
 8002b0a:	fb00 f303 	mul.w	r3, r0, r3
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	3332      	adds	r3, #50	; 0x32
 8002b14:	4a3c      	ldr	r2, [pc, #240]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b22:	4419      	add	r1, r3
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009a      	lsls	r2, r3, #2
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b3a:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002b3c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2064      	movs	r0, #100	; 0x64
 8002b44:	fb00 f303 	mul.w	r3, r0, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3332      	adds	r3, #50	; 0x32
 8002b4e:	4a2e      	ldr	r2, [pc, #184]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	f003 0207 	and.w	r2, r3, #7
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	440a      	add	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b62:	e04a      	b.n	8002bfa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009a      	lsls	r2, r3, #2
 8002b6e:	441a      	add	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	0119      	lsls	r1, r3, #4
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009a      	lsls	r2, r3, #2
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002b9c:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	2064      	movs	r0, #100	; 0x64
 8002ba4:	fb00 f303 	mul.w	r3, r0, r3
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	3332      	adds	r3, #50	; 0x32
 8002bae:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bba:	4419      	add	r1, r3
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009a      	lsls	r2, r3, #2
 8002bc6:	441a      	add	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002bd4:	fba3 0302 	umull	r0, r3, r3, r2
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	2064      	movs	r0, #100	; 0x64
 8002bdc:	fb00 f303 	mul.w	r3, r0, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	3332      	adds	r3, #50	; 0x32
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <UART_SetConfig+0x1c4>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	440a      	add	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40013800 	.word	0x40013800
 8002c08:	51eb851f 	.word	0x51eb851f

08002c0c <__errno>:
 8002c0c:	4b01      	ldr	r3, [pc, #4]	; (8002c14 <__errno+0x8>)
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000000c 	.word	0x2000000c

08002c18 <__libc_init_array>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	2600      	movs	r6, #0
 8002c1c:	4d0c      	ldr	r5, [pc, #48]	; (8002c50 <__libc_init_array+0x38>)
 8002c1e:	4c0d      	ldr	r4, [pc, #52]	; (8002c54 <__libc_init_array+0x3c>)
 8002c20:	1b64      	subs	r4, r4, r5
 8002c22:	10a4      	asrs	r4, r4, #2
 8002c24:	42a6      	cmp	r6, r4
 8002c26:	d109      	bne.n	8002c3c <__libc_init_array+0x24>
 8002c28:	f000 fc5c 	bl	80034e4 <_init>
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	4d0a      	ldr	r5, [pc, #40]	; (8002c58 <__libc_init_array+0x40>)
 8002c30:	4c0a      	ldr	r4, [pc, #40]	; (8002c5c <__libc_init_array+0x44>)
 8002c32:	1b64      	subs	r4, r4, r5
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	42a6      	cmp	r6, r4
 8002c38:	d105      	bne.n	8002c46 <__libc_init_array+0x2e>
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}
 8002c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c40:	4798      	blx	r3
 8002c42:	3601      	adds	r6, #1
 8002c44:	e7ee      	b.n	8002c24 <__libc_init_array+0xc>
 8002c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4a:	4798      	blx	r3
 8002c4c:	3601      	adds	r6, #1
 8002c4e:	e7f2      	b.n	8002c36 <__libc_init_array+0x1e>
 8002c50:	08003600 	.word	0x08003600
 8002c54:	08003600 	.word	0x08003600
 8002c58:	08003600 	.word	0x08003600
 8002c5c:	08003604 	.word	0x08003604

08002c60 <memset>:
 8002c60:	4603      	mov	r3, r0
 8002c62:	4402      	add	r2, r0
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d100      	bne.n	8002c6a <memset+0xa>
 8002c68:	4770      	bx	lr
 8002c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c6e:	e7f9      	b.n	8002c64 <memset+0x4>

08002c70 <siprintf>:
 8002c70:	b40e      	push	{r1, r2, r3}
 8002c72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c76:	b500      	push	{lr}
 8002c78:	b09c      	sub	sp, #112	; 0x70
 8002c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c7c:	9002      	str	r0, [sp, #8]
 8002c7e:	9006      	str	r0, [sp, #24]
 8002c80:	9107      	str	r1, [sp, #28]
 8002c82:	9104      	str	r1, [sp, #16]
 8002c84:	4808      	ldr	r0, [pc, #32]	; (8002ca8 <siprintf+0x38>)
 8002c86:	4909      	ldr	r1, [pc, #36]	; (8002cac <siprintf+0x3c>)
 8002c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c8c:	9105      	str	r1, [sp, #20]
 8002c8e:	6800      	ldr	r0, [r0, #0]
 8002c90:	a902      	add	r1, sp, #8
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	f000 f868 	bl	8002d68 <_svfiprintf_r>
 8002c98:	2200      	movs	r2, #0
 8002c9a:	9b02      	ldr	r3, [sp, #8]
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	b01c      	add	sp, #112	; 0x70
 8002ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ca4:	b003      	add	sp, #12
 8002ca6:	4770      	bx	lr
 8002ca8:	2000000c 	.word	0x2000000c
 8002cac:	ffff0208 	.word	0xffff0208

08002cb0 <__ssputs_r>:
 8002cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb4:	688e      	ldr	r6, [r1, #8]
 8002cb6:	4682      	mov	sl, r0
 8002cb8:	429e      	cmp	r6, r3
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	461f      	mov	r7, r3
 8002cc0:	d838      	bhi.n	8002d34 <__ssputs_r+0x84>
 8002cc2:	898a      	ldrh	r2, [r1, #12]
 8002cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cc8:	d032      	beq.n	8002d30 <__ssputs_r+0x80>
 8002cca:	6825      	ldr	r5, [r4, #0]
 8002ccc:	6909      	ldr	r1, [r1, #16]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	eba5 0901 	sub.w	r9, r5, r1
 8002cd4:	6965      	ldr	r5, [r4, #20]
 8002cd6:	444b      	add	r3, r9
 8002cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ce0:	106d      	asrs	r5, r5, #1
 8002ce2:	429d      	cmp	r5, r3
 8002ce4:	bf38      	it	cc
 8002ce6:	461d      	movcc	r5, r3
 8002ce8:	0553      	lsls	r3, r2, #21
 8002cea:	d531      	bpl.n	8002d50 <__ssputs_r+0xa0>
 8002cec:	4629      	mov	r1, r5
 8002cee:	f000 fb53 	bl	8003398 <_malloc_r>
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	b950      	cbnz	r0, 8002d0c <__ssputs_r+0x5c>
 8002cf6:	230c      	movs	r3, #12
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f8ca 3000 	str.w	r3, [sl]
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d06:	81a3      	strh	r3, [r4, #12]
 8002d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d0c:	464a      	mov	r2, r9
 8002d0e:	6921      	ldr	r1, [r4, #16]
 8002d10:	f000 face 	bl	80032b0 <memcpy>
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1e:	81a3      	strh	r3, [r4, #12]
 8002d20:	6126      	str	r6, [r4, #16]
 8002d22:	444e      	add	r6, r9
 8002d24:	6026      	str	r6, [r4, #0]
 8002d26:	463e      	mov	r6, r7
 8002d28:	6165      	str	r5, [r4, #20]
 8002d2a:	eba5 0509 	sub.w	r5, r5, r9
 8002d2e:	60a5      	str	r5, [r4, #8]
 8002d30:	42be      	cmp	r6, r7
 8002d32:	d900      	bls.n	8002d36 <__ssputs_r+0x86>
 8002d34:	463e      	mov	r6, r7
 8002d36:	4632      	mov	r2, r6
 8002d38:	4641      	mov	r1, r8
 8002d3a:	6820      	ldr	r0, [r4, #0]
 8002d3c:	f000 fac6 	bl	80032cc <memmove>
 8002d40:	68a3      	ldr	r3, [r4, #8]
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	1b9b      	subs	r3, r3, r6
 8002d46:	4432      	add	r2, r6
 8002d48:	2000      	movs	r0, #0
 8002d4a:	60a3      	str	r3, [r4, #8]
 8002d4c:	6022      	str	r2, [r4, #0]
 8002d4e:	e7db      	b.n	8002d08 <__ssputs_r+0x58>
 8002d50:	462a      	mov	r2, r5
 8002d52:	f000 fb7b 	bl	800344c <_realloc_r>
 8002d56:	4606      	mov	r6, r0
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d1e1      	bne.n	8002d20 <__ssputs_r+0x70>
 8002d5c:	4650      	mov	r0, sl
 8002d5e:	6921      	ldr	r1, [r4, #16]
 8002d60:	f000 face 	bl	8003300 <_free_r>
 8002d64:	e7c7      	b.n	8002cf6 <__ssputs_r+0x46>
	...

08002d68 <_svfiprintf_r>:
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	4698      	mov	r8, r3
 8002d6e:	898b      	ldrh	r3, [r1, #12]
 8002d70:	4607      	mov	r7, r0
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	460d      	mov	r5, r1
 8002d76:	4614      	mov	r4, r2
 8002d78:	b09d      	sub	sp, #116	; 0x74
 8002d7a:	d50e      	bpl.n	8002d9a <_svfiprintf_r+0x32>
 8002d7c:	690b      	ldr	r3, [r1, #16]
 8002d7e:	b963      	cbnz	r3, 8002d9a <_svfiprintf_r+0x32>
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	f000 fb09 	bl	8003398 <_malloc_r>
 8002d86:	6028      	str	r0, [r5, #0]
 8002d88:	6128      	str	r0, [r5, #16]
 8002d8a:	b920      	cbnz	r0, 8002d96 <_svfiprintf_r+0x2e>
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	e0d1      	b.n	8002f3a <_svfiprintf_r+0x1d2>
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	616b      	str	r3, [r5, #20]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d9e:	2320      	movs	r3, #32
 8002da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002da4:	2330      	movs	r3, #48	; 0x30
 8002da6:	f04f 0901 	mov.w	r9, #1
 8002daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f54 <_svfiprintf_r+0x1ec>
 8002db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002db6:	4623      	mov	r3, r4
 8002db8:	469a      	mov	sl, r3
 8002dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dbe:	b10a      	cbz	r2, 8002dc4 <_svfiprintf_r+0x5c>
 8002dc0:	2a25      	cmp	r2, #37	; 0x25
 8002dc2:	d1f9      	bne.n	8002db8 <_svfiprintf_r+0x50>
 8002dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8002dc8:	d00b      	beq.n	8002de2 <_svfiprintf_r+0x7a>
 8002dca:	465b      	mov	r3, fp
 8002dcc:	4622      	mov	r2, r4
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4638      	mov	r0, r7
 8002dd2:	f7ff ff6d 	bl	8002cb0 <__ssputs_r>
 8002dd6:	3001      	adds	r0, #1
 8002dd8:	f000 80aa 	beq.w	8002f30 <_svfiprintf_r+0x1c8>
 8002ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dde:	445a      	add	r2, fp
 8002de0:	9209      	str	r2, [sp, #36]	; 0x24
 8002de2:	f89a 3000 	ldrb.w	r3, [sl]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80a2 	beq.w	8002f30 <_svfiprintf_r+0x1c8>
 8002dec:	2300      	movs	r3, #0
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295
 8002df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002df6:	f10a 0a01 	add.w	sl, sl, #1
 8002dfa:	9304      	str	r3, [sp, #16]
 8002dfc:	9307      	str	r3, [sp, #28]
 8002dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e02:	931a      	str	r3, [sp, #104]	; 0x68
 8002e04:	4654      	mov	r4, sl
 8002e06:	2205      	movs	r2, #5
 8002e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e0c:	4851      	ldr	r0, [pc, #324]	; (8002f54 <_svfiprintf_r+0x1ec>)
 8002e0e:	f000 fa41 	bl	8003294 <memchr>
 8002e12:	9a04      	ldr	r2, [sp, #16]
 8002e14:	b9d8      	cbnz	r0, 8002e4e <_svfiprintf_r+0xe6>
 8002e16:	06d0      	lsls	r0, r2, #27
 8002e18:	bf44      	itt	mi
 8002e1a:	2320      	movmi	r3, #32
 8002e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e20:	0711      	lsls	r1, r2, #28
 8002e22:	bf44      	itt	mi
 8002e24:	232b      	movmi	r3, #43	; 0x2b
 8002e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e30:	d015      	beq.n	8002e5e <_svfiprintf_r+0xf6>
 8002e32:	4654      	mov	r4, sl
 8002e34:	2000      	movs	r0, #0
 8002e36:	f04f 0c0a 	mov.w	ip, #10
 8002e3a:	9a07      	ldr	r2, [sp, #28]
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e42:	3b30      	subs	r3, #48	; 0x30
 8002e44:	2b09      	cmp	r3, #9
 8002e46:	d94e      	bls.n	8002ee6 <_svfiprintf_r+0x17e>
 8002e48:	b1b0      	cbz	r0, 8002e78 <_svfiprintf_r+0x110>
 8002e4a:	9207      	str	r2, [sp, #28]
 8002e4c:	e014      	b.n	8002e78 <_svfiprintf_r+0x110>
 8002e4e:	eba0 0308 	sub.w	r3, r0, r8
 8002e52:	fa09 f303 	lsl.w	r3, r9, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	46a2      	mov	sl, r4
 8002e5a:	9304      	str	r3, [sp, #16]
 8002e5c:	e7d2      	b.n	8002e04 <_svfiprintf_r+0x9c>
 8002e5e:	9b03      	ldr	r3, [sp, #12]
 8002e60:	1d19      	adds	r1, r3, #4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	9103      	str	r1, [sp, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bfbb      	ittet	lt
 8002e6a:	425b      	neglt	r3, r3
 8002e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e70:	9307      	strge	r3, [sp, #28]
 8002e72:	9307      	strlt	r3, [sp, #28]
 8002e74:	bfb8      	it	lt
 8002e76:	9204      	strlt	r2, [sp, #16]
 8002e78:	7823      	ldrb	r3, [r4, #0]
 8002e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e7c:	d10c      	bne.n	8002e98 <_svfiprintf_r+0x130>
 8002e7e:	7863      	ldrb	r3, [r4, #1]
 8002e80:	2b2a      	cmp	r3, #42	; 0x2a
 8002e82:	d135      	bne.n	8002ef0 <_svfiprintf_r+0x188>
 8002e84:	9b03      	ldr	r3, [sp, #12]
 8002e86:	3402      	adds	r4, #2
 8002e88:	1d1a      	adds	r2, r3, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	9203      	str	r2, [sp, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bfb8      	it	lt
 8002e92:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e96:	9305      	str	r3, [sp, #20]
 8002e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f64 <_svfiprintf_r+0x1fc>
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	4650      	mov	r0, sl
 8002ea0:	7821      	ldrb	r1, [r4, #0]
 8002ea2:	f000 f9f7 	bl	8003294 <memchr>
 8002ea6:	b140      	cbz	r0, 8002eba <_svfiprintf_r+0x152>
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	eba0 000a 	sub.w	r0, r0, sl
 8002eae:	fa03 f000 	lsl.w	r0, r3, r0
 8002eb2:	9b04      	ldr	r3, [sp, #16]
 8002eb4:	3401      	adds	r4, #1
 8002eb6:	4303      	orrs	r3, r0
 8002eb8:	9304      	str	r3, [sp, #16]
 8002eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ebe:	2206      	movs	r2, #6
 8002ec0:	4825      	ldr	r0, [pc, #148]	; (8002f58 <_svfiprintf_r+0x1f0>)
 8002ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ec6:	f000 f9e5 	bl	8003294 <memchr>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d038      	beq.n	8002f40 <_svfiprintf_r+0x1d8>
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <_svfiprintf_r+0x1f4>)
 8002ed0:	bb1b      	cbnz	r3, 8002f1a <_svfiprintf_r+0x1b2>
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	3307      	adds	r3, #7
 8002ed6:	f023 0307 	bic.w	r3, r3, #7
 8002eda:	3308      	adds	r3, #8
 8002edc:	9303      	str	r3, [sp, #12]
 8002ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee0:	4433      	add	r3, r6
 8002ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee4:	e767      	b.n	8002db6 <_svfiprintf_r+0x4e>
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eee:	e7a5      	b.n	8002e3c <_svfiprintf_r+0xd4>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f04f 0c0a 	mov.w	ip, #10
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	3401      	adds	r4, #1
 8002efa:	9305      	str	r3, [sp, #20]
 8002efc:	4620      	mov	r0, r4
 8002efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f02:	3a30      	subs	r2, #48	; 0x30
 8002f04:	2a09      	cmp	r2, #9
 8002f06:	d903      	bls.n	8002f10 <_svfiprintf_r+0x1a8>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0c5      	beq.n	8002e98 <_svfiprintf_r+0x130>
 8002f0c:	9105      	str	r1, [sp, #20]
 8002f0e:	e7c3      	b.n	8002e98 <_svfiprintf_r+0x130>
 8002f10:	4604      	mov	r4, r0
 8002f12:	2301      	movs	r3, #1
 8002f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f18:	e7f0      	b.n	8002efc <_svfiprintf_r+0x194>
 8002f1a:	ab03      	add	r3, sp, #12
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	462a      	mov	r2, r5
 8002f20:	4638      	mov	r0, r7
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <_svfiprintf_r+0x1f8>)
 8002f24:	a904      	add	r1, sp, #16
 8002f26:	f3af 8000 	nop.w
 8002f2a:	1c42      	adds	r2, r0, #1
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	d1d6      	bne.n	8002ede <_svfiprintf_r+0x176>
 8002f30:	89ab      	ldrh	r3, [r5, #12]
 8002f32:	065b      	lsls	r3, r3, #25
 8002f34:	f53f af2c 	bmi.w	8002d90 <_svfiprintf_r+0x28>
 8002f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f3a:	b01d      	add	sp, #116	; 0x74
 8002f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f40:	ab03      	add	r3, sp, #12
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	462a      	mov	r2, r5
 8002f46:	4638      	mov	r0, r7
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <_svfiprintf_r+0x1f8>)
 8002f4a:	a904      	add	r1, sp, #16
 8002f4c:	f000 f87c 	bl	8003048 <_printf_i>
 8002f50:	e7eb      	b.n	8002f2a <_svfiprintf_r+0x1c2>
 8002f52:	bf00      	nop
 8002f54:	080035c4 	.word	0x080035c4
 8002f58:	080035ce 	.word	0x080035ce
 8002f5c:	00000000 	.word	0x00000000
 8002f60:	08002cb1 	.word	0x08002cb1
 8002f64:	080035ca 	.word	0x080035ca

08002f68 <_printf_common>:
 8002f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6c:	4616      	mov	r6, r2
 8002f6e:	4699      	mov	r9, r3
 8002f70:	688a      	ldr	r2, [r1, #8]
 8002f72:	690b      	ldr	r3, [r1, #16]
 8002f74:	4607      	mov	r7, r0
 8002f76:	4293      	cmp	r3, r2
 8002f78:	bfb8      	it	lt
 8002f7a:	4613      	movlt	r3, r2
 8002f7c:	6033      	str	r3, [r6, #0]
 8002f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f82:	460c      	mov	r4, r1
 8002f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f88:	b10a      	cbz	r2, 8002f8e <_printf_common+0x26>
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	6033      	str	r3, [r6, #0]
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	0699      	lsls	r1, r3, #26
 8002f92:	bf42      	ittt	mi
 8002f94:	6833      	ldrmi	r3, [r6, #0]
 8002f96:	3302      	addmi	r3, #2
 8002f98:	6033      	strmi	r3, [r6, #0]
 8002f9a:	6825      	ldr	r5, [r4, #0]
 8002f9c:	f015 0506 	ands.w	r5, r5, #6
 8002fa0:	d106      	bne.n	8002fb0 <_printf_common+0x48>
 8002fa2:	f104 0a19 	add.w	sl, r4, #25
 8002fa6:	68e3      	ldr	r3, [r4, #12]
 8002fa8:	6832      	ldr	r2, [r6, #0]
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	42ab      	cmp	r3, r5
 8002fae:	dc28      	bgt.n	8003002 <_printf_common+0x9a>
 8002fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fb4:	1e13      	subs	r3, r2, #0
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	bf18      	it	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	0692      	lsls	r2, r2, #26
 8002fbe:	d42d      	bmi.n	800301c <_printf_common+0xb4>
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fc8:	47c0      	blx	r8
 8002fca:	3001      	adds	r0, #1
 8002fcc:	d020      	beq.n	8003010 <_printf_common+0xa8>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	68e5      	ldr	r5, [r4, #12]
 8002fd2:	f003 0306 	and.w	r3, r3, #6
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf18      	it	ne
 8002fda:	2500      	movne	r5, #0
 8002fdc:	6832      	ldr	r2, [r6, #0]
 8002fde:	f04f 0600 	mov.w	r6, #0
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	bf08      	it	eq
 8002fe6:	1aad      	subeq	r5, r5, r2
 8002fe8:	6922      	ldr	r2, [r4, #16]
 8002fea:	bf08      	it	eq
 8002fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bfc4      	itt	gt
 8002ff4:	1a9b      	subgt	r3, r3, r2
 8002ff6:	18ed      	addgt	r5, r5, r3
 8002ff8:	341a      	adds	r4, #26
 8002ffa:	42b5      	cmp	r5, r6
 8002ffc:	d11a      	bne.n	8003034 <_printf_common+0xcc>
 8002ffe:	2000      	movs	r0, #0
 8003000:	e008      	b.n	8003014 <_printf_common+0xac>
 8003002:	2301      	movs	r3, #1
 8003004:	4652      	mov	r2, sl
 8003006:	4649      	mov	r1, r9
 8003008:	4638      	mov	r0, r7
 800300a:	47c0      	blx	r8
 800300c:	3001      	adds	r0, #1
 800300e:	d103      	bne.n	8003018 <_printf_common+0xb0>
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003018:	3501      	adds	r5, #1
 800301a:	e7c4      	b.n	8002fa6 <_printf_common+0x3e>
 800301c:	2030      	movs	r0, #48	; 0x30
 800301e:	18e1      	adds	r1, r4, r3
 8003020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800302a:	4422      	add	r2, r4
 800302c:	3302      	adds	r3, #2
 800302e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003032:	e7c5      	b.n	8002fc0 <_printf_common+0x58>
 8003034:	2301      	movs	r3, #1
 8003036:	4622      	mov	r2, r4
 8003038:	4649      	mov	r1, r9
 800303a:	4638      	mov	r0, r7
 800303c:	47c0      	blx	r8
 800303e:	3001      	adds	r0, #1
 8003040:	d0e6      	beq.n	8003010 <_printf_common+0xa8>
 8003042:	3601      	adds	r6, #1
 8003044:	e7d9      	b.n	8002ffa <_printf_common+0x92>
	...

08003048 <_printf_i>:
 8003048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800304c:	460c      	mov	r4, r1
 800304e:	7e27      	ldrb	r7, [r4, #24]
 8003050:	4691      	mov	r9, r2
 8003052:	2f78      	cmp	r7, #120	; 0x78
 8003054:	4680      	mov	r8, r0
 8003056:	469a      	mov	sl, r3
 8003058:	990c      	ldr	r1, [sp, #48]	; 0x30
 800305a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800305e:	d807      	bhi.n	8003070 <_printf_i+0x28>
 8003060:	2f62      	cmp	r7, #98	; 0x62
 8003062:	d80a      	bhi.n	800307a <_printf_i+0x32>
 8003064:	2f00      	cmp	r7, #0
 8003066:	f000 80d9 	beq.w	800321c <_printf_i+0x1d4>
 800306a:	2f58      	cmp	r7, #88	; 0x58
 800306c:	f000 80a4 	beq.w	80031b8 <_printf_i+0x170>
 8003070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003078:	e03a      	b.n	80030f0 <_printf_i+0xa8>
 800307a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800307e:	2b15      	cmp	r3, #21
 8003080:	d8f6      	bhi.n	8003070 <_printf_i+0x28>
 8003082:	a001      	add	r0, pc, #4	; (adr r0, 8003088 <_printf_i+0x40>)
 8003084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003088:	080030e1 	.word	0x080030e1
 800308c:	080030f5 	.word	0x080030f5
 8003090:	08003071 	.word	0x08003071
 8003094:	08003071 	.word	0x08003071
 8003098:	08003071 	.word	0x08003071
 800309c:	08003071 	.word	0x08003071
 80030a0:	080030f5 	.word	0x080030f5
 80030a4:	08003071 	.word	0x08003071
 80030a8:	08003071 	.word	0x08003071
 80030ac:	08003071 	.word	0x08003071
 80030b0:	08003071 	.word	0x08003071
 80030b4:	08003203 	.word	0x08003203
 80030b8:	08003125 	.word	0x08003125
 80030bc:	080031e5 	.word	0x080031e5
 80030c0:	08003071 	.word	0x08003071
 80030c4:	08003071 	.word	0x08003071
 80030c8:	08003225 	.word	0x08003225
 80030cc:	08003071 	.word	0x08003071
 80030d0:	08003125 	.word	0x08003125
 80030d4:	08003071 	.word	0x08003071
 80030d8:	08003071 	.word	0x08003071
 80030dc:	080031ed 	.word	0x080031ed
 80030e0:	680b      	ldr	r3, [r1, #0]
 80030e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030e6:	1d1a      	adds	r2, r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	600a      	str	r2, [r1, #0]
 80030ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0a4      	b.n	800323e <_printf_i+0x1f6>
 80030f4:	6825      	ldr	r5, [r4, #0]
 80030f6:	6808      	ldr	r0, [r1, #0]
 80030f8:	062e      	lsls	r6, r5, #24
 80030fa:	f100 0304 	add.w	r3, r0, #4
 80030fe:	d50a      	bpl.n	8003116 <_printf_i+0xce>
 8003100:	6805      	ldr	r5, [r0, #0]
 8003102:	600b      	str	r3, [r1, #0]
 8003104:	2d00      	cmp	r5, #0
 8003106:	da03      	bge.n	8003110 <_printf_i+0xc8>
 8003108:	232d      	movs	r3, #45	; 0x2d
 800310a:	426d      	negs	r5, r5
 800310c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003110:	230a      	movs	r3, #10
 8003112:	485e      	ldr	r0, [pc, #376]	; (800328c <_printf_i+0x244>)
 8003114:	e019      	b.n	800314a <_printf_i+0x102>
 8003116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800311a:	6805      	ldr	r5, [r0, #0]
 800311c:	600b      	str	r3, [r1, #0]
 800311e:	bf18      	it	ne
 8003120:	b22d      	sxthne	r5, r5
 8003122:	e7ef      	b.n	8003104 <_printf_i+0xbc>
 8003124:	680b      	ldr	r3, [r1, #0]
 8003126:	6825      	ldr	r5, [r4, #0]
 8003128:	1d18      	adds	r0, r3, #4
 800312a:	6008      	str	r0, [r1, #0]
 800312c:	0628      	lsls	r0, r5, #24
 800312e:	d501      	bpl.n	8003134 <_printf_i+0xec>
 8003130:	681d      	ldr	r5, [r3, #0]
 8003132:	e002      	b.n	800313a <_printf_i+0xf2>
 8003134:	0669      	lsls	r1, r5, #25
 8003136:	d5fb      	bpl.n	8003130 <_printf_i+0xe8>
 8003138:	881d      	ldrh	r5, [r3, #0]
 800313a:	2f6f      	cmp	r7, #111	; 0x6f
 800313c:	bf0c      	ite	eq
 800313e:	2308      	moveq	r3, #8
 8003140:	230a      	movne	r3, #10
 8003142:	4852      	ldr	r0, [pc, #328]	; (800328c <_printf_i+0x244>)
 8003144:	2100      	movs	r1, #0
 8003146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800314a:	6866      	ldr	r6, [r4, #4]
 800314c:	2e00      	cmp	r6, #0
 800314e:	bfa8      	it	ge
 8003150:	6821      	ldrge	r1, [r4, #0]
 8003152:	60a6      	str	r6, [r4, #8]
 8003154:	bfa4      	itt	ge
 8003156:	f021 0104 	bicge.w	r1, r1, #4
 800315a:	6021      	strge	r1, [r4, #0]
 800315c:	b90d      	cbnz	r5, 8003162 <_printf_i+0x11a>
 800315e:	2e00      	cmp	r6, #0
 8003160:	d04d      	beq.n	80031fe <_printf_i+0x1b6>
 8003162:	4616      	mov	r6, r2
 8003164:	fbb5 f1f3 	udiv	r1, r5, r3
 8003168:	fb03 5711 	mls	r7, r3, r1, r5
 800316c:	5dc7      	ldrb	r7, [r0, r7]
 800316e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003172:	462f      	mov	r7, r5
 8003174:	42bb      	cmp	r3, r7
 8003176:	460d      	mov	r5, r1
 8003178:	d9f4      	bls.n	8003164 <_printf_i+0x11c>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d10b      	bne.n	8003196 <_printf_i+0x14e>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	07df      	lsls	r7, r3, #31
 8003182:	d508      	bpl.n	8003196 <_printf_i+0x14e>
 8003184:	6923      	ldr	r3, [r4, #16]
 8003186:	6861      	ldr	r1, [r4, #4]
 8003188:	4299      	cmp	r1, r3
 800318a:	bfde      	ittt	le
 800318c:	2330      	movle	r3, #48	; 0x30
 800318e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003192:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003196:	1b92      	subs	r2, r2, r6
 8003198:	6122      	str	r2, [r4, #16]
 800319a:	464b      	mov	r3, r9
 800319c:	4621      	mov	r1, r4
 800319e:	4640      	mov	r0, r8
 80031a0:	f8cd a000 	str.w	sl, [sp]
 80031a4:	aa03      	add	r2, sp, #12
 80031a6:	f7ff fedf 	bl	8002f68 <_printf_common>
 80031aa:	3001      	adds	r0, #1
 80031ac:	d14c      	bne.n	8003248 <_printf_i+0x200>
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	b004      	add	sp, #16
 80031b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b8:	4834      	ldr	r0, [pc, #208]	; (800328c <_printf_i+0x244>)
 80031ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031be:	680e      	ldr	r6, [r1, #0]
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80031c6:	061f      	lsls	r7, r3, #24
 80031c8:	600e      	str	r6, [r1, #0]
 80031ca:	d514      	bpl.n	80031f6 <_printf_i+0x1ae>
 80031cc:	07d9      	lsls	r1, r3, #31
 80031ce:	bf44      	itt	mi
 80031d0:	f043 0320 	orrmi.w	r3, r3, #32
 80031d4:	6023      	strmi	r3, [r4, #0]
 80031d6:	b91d      	cbnz	r5, 80031e0 <_printf_i+0x198>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	f023 0320 	bic.w	r3, r3, #32
 80031de:	6023      	str	r3, [r4, #0]
 80031e0:	2310      	movs	r3, #16
 80031e2:	e7af      	b.n	8003144 <_printf_i+0xfc>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	f043 0320 	orr.w	r3, r3, #32
 80031ea:	6023      	str	r3, [r4, #0]
 80031ec:	2378      	movs	r3, #120	; 0x78
 80031ee:	4828      	ldr	r0, [pc, #160]	; (8003290 <_printf_i+0x248>)
 80031f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031f4:	e7e3      	b.n	80031be <_printf_i+0x176>
 80031f6:	065e      	lsls	r6, r3, #25
 80031f8:	bf48      	it	mi
 80031fa:	b2ad      	uxthmi	r5, r5
 80031fc:	e7e6      	b.n	80031cc <_printf_i+0x184>
 80031fe:	4616      	mov	r6, r2
 8003200:	e7bb      	b.n	800317a <_printf_i+0x132>
 8003202:	680b      	ldr	r3, [r1, #0]
 8003204:	6826      	ldr	r6, [r4, #0]
 8003206:	1d1d      	adds	r5, r3, #4
 8003208:	6960      	ldr	r0, [r4, #20]
 800320a:	600d      	str	r5, [r1, #0]
 800320c:	0635      	lsls	r5, r6, #24
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	d501      	bpl.n	8003216 <_printf_i+0x1ce>
 8003212:	6018      	str	r0, [r3, #0]
 8003214:	e002      	b.n	800321c <_printf_i+0x1d4>
 8003216:	0671      	lsls	r1, r6, #25
 8003218:	d5fb      	bpl.n	8003212 <_printf_i+0x1ca>
 800321a:	8018      	strh	r0, [r3, #0]
 800321c:	2300      	movs	r3, #0
 800321e:	4616      	mov	r6, r2
 8003220:	6123      	str	r3, [r4, #16]
 8003222:	e7ba      	b.n	800319a <_printf_i+0x152>
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	1d1a      	adds	r2, r3, #4
 8003228:	600a      	str	r2, [r1, #0]
 800322a:	681e      	ldr	r6, [r3, #0]
 800322c:	2100      	movs	r1, #0
 800322e:	4630      	mov	r0, r6
 8003230:	6862      	ldr	r2, [r4, #4]
 8003232:	f000 f82f 	bl	8003294 <memchr>
 8003236:	b108      	cbz	r0, 800323c <_printf_i+0x1f4>
 8003238:	1b80      	subs	r0, r0, r6
 800323a:	6060      	str	r0, [r4, #4]
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	6123      	str	r3, [r4, #16]
 8003240:	2300      	movs	r3, #0
 8003242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003246:	e7a8      	b.n	800319a <_printf_i+0x152>
 8003248:	4632      	mov	r2, r6
 800324a:	4649      	mov	r1, r9
 800324c:	4640      	mov	r0, r8
 800324e:	6923      	ldr	r3, [r4, #16]
 8003250:	47d0      	blx	sl
 8003252:	3001      	adds	r0, #1
 8003254:	d0ab      	beq.n	80031ae <_printf_i+0x166>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	079b      	lsls	r3, r3, #30
 800325a:	d413      	bmi.n	8003284 <_printf_i+0x23c>
 800325c:	68e0      	ldr	r0, [r4, #12]
 800325e:	9b03      	ldr	r3, [sp, #12]
 8003260:	4298      	cmp	r0, r3
 8003262:	bfb8      	it	lt
 8003264:	4618      	movlt	r0, r3
 8003266:	e7a4      	b.n	80031b2 <_printf_i+0x16a>
 8003268:	2301      	movs	r3, #1
 800326a:	4632      	mov	r2, r6
 800326c:	4649      	mov	r1, r9
 800326e:	4640      	mov	r0, r8
 8003270:	47d0      	blx	sl
 8003272:	3001      	adds	r0, #1
 8003274:	d09b      	beq.n	80031ae <_printf_i+0x166>
 8003276:	3501      	adds	r5, #1
 8003278:	68e3      	ldr	r3, [r4, #12]
 800327a:	9903      	ldr	r1, [sp, #12]
 800327c:	1a5b      	subs	r3, r3, r1
 800327e:	42ab      	cmp	r3, r5
 8003280:	dcf2      	bgt.n	8003268 <_printf_i+0x220>
 8003282:	e7eb      	b.n	800325c <_printf_i+0x214>
 8003284:	2500      	movs	r5, #0
 8003286:	f104 0619 	add.w	r6, r4, #25
 800328a:	e7f5      	b.n	8003278 <_printf_i+0x230>
 800328c:	080035d5 	.word	0x080035d5
 8003290:	080035e6 	.word	0x080035e6

08003294 <memchr>:
 8003294:	4603      	mov	r3, r0
 8003296:	b510      	push	{r4, lr}
 8003298:	b2c9      	uxtb	r1, r1
 800329a:	4402      	add	r2, r0
 800329c:	4293      	cmp	r3, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	d101      	bne.n	80032a6 <memchr+0x12>
 80032a2:	2000      	movs	r0, #0
 80032a4:	e003      	b.n	80032ae <memchr+0x1a>
 80032a6:	7804      	ldrb	r4, [r0, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	428c      	cmp	r4, r1
 80032ac:	d1f6      	bne.n	800329c <memchr+0x8>
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <memcpy>:
 80032b0:	440a      	add	r2, r1
 80032b2:	4291      	cmp	r1, r2
 80032b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80032b8:	d100      	bne.n	80032bc <memcpy+0xc>
 80032ba:	4770      	bx	lr
 80032bc:	b510      	push	{r4, lr}
 80032be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032c2:	4291      	cmp	r1, r2
 80032c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032c8:	d1f9      	bne.n	80032be <memcpy+0xe>
 80032ca:	bd10      	pop	{r4, pc}

080032cc <memmove>:
 80032cc:	4288      	cmp	r0, r1
 80032ce:	b510      	push	{r4, lr}
 80032d0:	eb01 0402 	add.w	r4, r1, r2
 80032d4:	d902      	bls.n	80032dc <memmove+0x10>
 80032d6:	4284      	cmp	r4, r0
 80032d8:	4623      	mov	r3, r4
 80032da:	d807      	bhi.n	80032ec <memmove+0x20>
 80032dc:	1e43      	subs	r3, r0, #1
 80032de:	42a1      	cmp	r1, r4
 80032e0:	d008      	beq.n	80032f4 <memmove+0x28>
 80032e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032ea:	e7f8      	b.n	80032de <memmove+0x12>
 80032ec:	4601      	mov	r1, r0
 80032ee:	4402      	add	r2, r0
 80032f0:	428a      	cmp	r2, r1
 80032f2:	d100      	bne.n	80032f6 <memmove+0x2a>
 80032f4:	bd10      	pop	{r4, pc}
 80032f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032fe:	e7f7      	b.n	80032f0 <memmove+0x24>

08003300 <_free_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4605      	mov	r5, r0
 8003304:	2900      	cmp	r1, #0
 8003306:	d043      	beq.n	8003390 <_free_r+0x90>
 8003308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800330c:	1f0c      	subs	r4, r1, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	bfb8      	it	lt
 8003312:	18e4      	addlt	r4, r4, r3
 8003314:	f000 f8d0 	bl	80034b8 <__malloc_lock>
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <_free_r+0x94>)
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	4610      	mov	r0, r2
 800331e:	b933      	cbnz	r3, 800332e <_free_r+0x2e>
 8003320:	6063      	str	r3, [r4, #4]
 8003322:	6014      	str	r4, [r2, #0]
 8003324:	4628      	mov	r0, r5
 8003326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800332a:	f000 b8cb 	b.w	80034c4 <__malloc_unlock>
 800332e:	42a3      	cmp	r3, r4
 8003330:	d90a      	bls.n	8003348 <_free_r+0x48>
 8003332:	6821      	ldr	r1, [r4, #0]
 8003334:	1862      	adds	r2, r4, r1
 8003336:	4293      	cmp	r3, r2
 8003338:	bf01      	itttt	eq
 800333a:	681a      	ldreq	r2, [r3, #0]
 800333c:	685b      	ldreq	r3, [r3, #4]
 800333e:	1852      	addeq	r2, r2, r1
 8003340:	6022      	streq	r2, [r4, #0]
 8003342:	6063      	str	r3, [r4, #4]
 8003344:	6004      	str	r4, [r0, #0]
 8003346:	e7ed      	b.n	8003324 <_free_r+0x24>
 8003348:	461a      	mov	r2, r3
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b10b      	cbz	r3, 8003352 <_free_r+0x52>
 800334e:	42a3      	cmp	r3, r4
 8003350:	d9fa      	bls.n	8003348 <_free_r+0x48>
 8003352:	6811      	ldr	r1, [r2, #0]
 8003354:	1850      	adds	r0, r2, r1
 8003356:	42a0      	cmp	r0, r4
 8003358:	d10b      	bne.n	8003372 <_free_r+0x72>
 800335a:	6820      	ldr	r0, [r4, #0]
 800335c:	4401      	add	r1, r0
 800335e:	1850      	adds	r0, r2, r1
 8003360:	4283      	cmp	r3, r0
 8003362:	6011      	str	r1, [r2, #0]
 8003364:	d1de      	bne.n	8003324 <_free_r+0x24>
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4401      	add	r1, r0
 800336c:	6011      	str	r1, [r2, #0]
 800336e:	6053      	str	r3, [r2, #4]
 8003370:	e7d8      	b.n	8003324 <_free_r+0x24>
 8003372:	d902      	bls.n	800337a <_free_r+0x7a>
 8003374:	230c      	movs	r3, #12
 8003376:	602b      	str	r3, [r5, #0]
 8003378:	e7d4      	b.n	8003324 <_free_r+0x24>
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	1821      	adds	r1, r4, r0
 800337e:	428b      	cmp	r3, r1
 8003380:	bf01      	itttt	eq
 8003382:	6819      	ldreq	r1, [r3, #0]
 8003384:	685b      	ldreq	r3, [r3, #4]
 8003386:	1809      	addeq	r1, r1, r0
 8003388:	6021      	streq	r1, [r4, #0]
 800338a:	6063      	str	r3, [r4, #4]
 800338c:	6054      	str	r4, [r2, #4]
 800338e:	e7c9      	b.n	8003324 <_free_r+0x24>
 8003390:	bd38      	pop	{r3, r4, r5, pc}
 8003392:	bf00      	nop
 8003394:	20000090 	.word	0x20000090

08003398 <_malloc_r>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	1ccd      	adds	r5, r1, #3
 800339c:	f025 0503 	bic.w	r5, r5, #3
 80033a0:	3508      	adds	r5, #8
 80033a2:	2d0c      	cmp	r5, #12
 80033a4:	bf38      	it	cc
 80033a6:	250c      	movcc	r5, #12
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	4606      	mov	r6, r0
 80033ac:	db01      	blt.n	80033b2 <_malloc_r+0x1a>
 80033ae:	42a9      	cmp	r1, r5
 80033b0:	d903      	bls.n	80033ba <_malloc_r+0x22>
 80033b2:	230c      	movs	r3, #12
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	2000      	movs	r0, #0
 80033b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ba:	f000 f87d 	bl	80034b8 <__malloc_lock>
 80033be:	4921      	ldr	r1, [pc, #132]	; (8003444 <_malloc_r+0xac>)
 80033c0:	680a      	ldr	r2, [r1, #0]
 80033c2:	4614      	mov	r4, r2
 80033c4:	b99c      	cbnz	r4, 80033ee <_malloc_r+0x56>
 80033c6:	4f20      	ldr	r7, [pc, #128]	; (8003448 <_malloc_r+0xb0>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b923      	cbnz	r3, 80033d6 <_malloc_r+0x3e>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4630      	mov	r0, r6
 80033d0:	f000 f862 	bl	8003498 <_sbrk_r>
 80033d4:	6038      	str	r0, [r7, #0]
 80033d6:	4629      	mov	r1, r5
 80033d8:	4630      	mov	r0, r6
 80033da:	f000 f85d 	bl	8003498 <_sbrk_r>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d123      	bne.n	800342a <_malloc_r+0x92>
 80033e2:	230c      	movs	r3, #12
 80033e4:	4630      	mov	r0, r6
 80033e6:	6033      	str	r3, [r6, #0]
 80033e8:	f000 f86c 	bl	80034c4 <__malloc_unlock>
 80033ec:	e7e3      	b.n	80033b6 <_malloc_r+0x1e>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	1b5b      	subs	r3, r3, r5
 80033f2:	d417      	bmi.n	8003424 <_malloc_r+0x8c>
 80033f4:	2b0b      	cmp	r3, #11
 80033f6:	d903      	bls.n	8003400 <_malloc_r+0x68>
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	441c      	add	r4, r3
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	e004      	b.n	800340a <_malloc_r+0x72>
 8003400:	6863      	ldr	r3, [r4, #4]
 8003402:	42a2      	cmp	r2, r4
 8003404:	bf0c      	ite	eq
 8003406:	600b      	streq	r3, [r1, #0]
 8003408:	6053      	strne	r3, [r2, #4]
 800340a:	4630      	mov	r0, r6
 800340c:	f000 f85a 	bl	80034c4 <__malloc_unlock>
 8003410:	f104 000b 	add.w	r0, r4, #11
 8003414:	1d23      	adds	r3, r4, #4
 8003416:	f020 0007 	bic.w	r0, r0, #7
 800341a:	1ac2      	subs	r2, r0, r3
 800341c:	d0cc      	beq.n	80033b8 <_malloc_r+0x20>
 800341e:	1a1b      	subs	r3, r3, r0
 8003420:	50a3      	str	r3, [r4, r2]
 8003422:	e7c9      	b.n	80033b8 <_malloc_r+0x20>
 8003424:	4622      	mov	r2, r4
 8003426:	6864      	ldr	r4, [r4, #4]
 8003428:	e7cc      	b.n	80033c4 <_malloc_r+0x2c>
 800342a:	1cc4      	adds	r4, r0, #3
 800342c:	f024 0403 	bic.w	r4, r4, #3
 8003430:	42a0      	cmp	r0, r4
 8003432:	d0e3      	beq.n	80033fc <_malloc_r+0x64>
 8003434:	1a21      	subs	r1, r4, r0
 8003436:	4630      	mov	r0, r6
 8003438:	f000 f82e 	bl	8003498 <_sbrk_r>
 800343c:	3001      	adds	r0, #1
 800343e:	d1dd      	bne.n	80033fc <_malloc_r+0x64>
 8003440:	e7cf      	b.n	80033e2 <_malloc_r+0x4a>
 8003442:	bf00      	nop
 8003444:	20000090 	.word	0x20000090
 8003448:	20000094 	.word	0x20000094

0800344c <_realloc_r>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	4607      	mov	r7, r0
 8003450:	4614      	mov	r4, r2
 8003452:	460e      	mov	r6, r1
 8003454:	b921      	cbnz	r1, 8003460 <_realloc_r+0x14>
 8003456:	4611      	mov	r1, r2
 8003458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800345c:	f7ff bf9c 	b.w	8003398 <_malloc_r>
 8003460:	b922      	cbnz	r2, 800346c <_realloc_r+0x20>
 8003462:	f7ff ff4d 	bl	8003300 <_free_r>
 8003466:	4625      	mov	r5, r4
 8003468:	4628      	mov	r0, r5
 800346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800346c:	f000 f830 	bl	80034d0 <_malloc_usable_size_r>
 8003470:	42a0      	cmp	r0, r4
 8003472:	d20f      	bcs.n	8003494 <_realloc_r+0x48>
 8003474:	4621      	mov	r1, r4
 8003476:	4638      	mov	r0, r7
 8003478:	f7ff ff8e 	bl	8003398 <_malloc_r>
 800347c:	4605      	mov	r5, r0
 800347e:	2800      	cmp	r0, #0
 8003480:	d0f2      	beq.n	8003468 <_realloc_r+0x1c>
 8003482:	4631      	mov	r1, r6
 8003484:	4622      	mov	r2, r4
 8003486:	f7ff ff13 	bl	80032b0 <memcpy>
 800348a:	4631      	mov	r1, r6
 800348c:	4638      	mov	r0, r7
 800348e:	f7ff ff37 	bl	8003300 <_free_r>
 8003492:	e7e9      	b.n	8003468 <_realloc_r+0x1c>
 8003494:	4635      	mov	r5, r6
 8003496:	e7e7      	b.n	8003468 <_realloc_r+0x1c>

08003498 <_sbrk_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	2300      	movs	r3, #0
 800349c:	4d05      	ldr	r5, [pc, #20]	; (80034b4 <_sbrk_r+0x1c>)
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	602b      	str	r3, [r5, #0]
 80034a4:	f7fd fb26 	bl	8000af4 <_sbrk>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d102      	bne.n	80034b2 <_sbrk_r+0x1a>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b103      	cbz	r3, 80034b2 <_sbrk_r+0x1a>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	20000194 	.word	0x20000194

080034b8 <__malloc_lock>:
 80034b8:	4801      	ldr	r0, [pc, #4]	; (80034c0 <__malloc_lock+0x8>)
 80034ba:	f000 b811 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 80034be:	bf00      	nop
 80034c0:	2000019c 	.word	0x2000019c

080034c4 <__malloc_unlock>:
 80034c4:	4801      	ldr	r0, [pc, #4]	; (80034cc <__malloc_unlock+0x8>)
 80034c6:	f000 b80c 	b.w	80034e2 <__retarget_lock_release_recursive>
 80034ca:	bf00      	nop
 80034cc:	2000019c 	.word	0x2000019c

080034d0 <_malloc_usable_size_r>:
 80034d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d4:	1f18      	subs	r0, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bfbc      	itt	lt
 80034da:	580b      	ldrlt	r3, [r1, r0]
 80034dc:	18c0      	addlt	r0, r0, r3
 80034de:	4770      	bx	lr

080034e0 <__retarget_lock_acquire_recursive>:
 80034e0:	4770      	bx	lr

080034e2 <__retarget_lock_release_recursive>:
 80034e2:	4770      	bx	lr

080034e4 <_init>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr

080034f0 <_fini>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	bf00      	nop
 80034f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	469e      	mov	lr, r3
 80034fa:	4770      	bx	lr
